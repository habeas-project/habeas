/* tslint:disable */
/* eslint-disable */
/**
 * Habeas API
 * API for the Habeas application - connecting detained individuals with legal representatives
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: info@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Schema for an Attorney with ID and timestamps
 * @export
 * @interface Attorney
 */
export interface Attorney {
    /**
     * 
     * @type {string}
     * @memberof Attorney
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Attorney
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof Attorney
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Attorney
     */
    'zip_code': string;
    /**
     * 
     * @type {string}
     * @memberof Attorney
     */
    'state': string;
    /**
     * 
     * @type {number}
     * @memberof Attorney
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Attorney
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Attorney
     */
    'updated_at': string;
}
/**
 * Schema for creating a new Attorney
 * @export
 * @interface AttorneyCreate
 */
export interface AttorneyCreate {
    /**
     * 
     * @type {string}
     * @memberof AttorneyCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AttorneyCreate
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof AttorneyCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AttorneyCreate
     */
    'zip_code': string;
    /**
     * 
     * @type {string}
     * @memberof AttorneyCreate
     */
    'state': string;
}
/**
 * Schema for updating an Attorney
 * @export
 * @interface AttorneyUpdate
 */
export interface AttorneyUpdate {
    /**
     * 
     * @type {string}
     * @memberof AttorneyUpdate
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttorneyUpdate
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttorneyUpdate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttorneyUpdate
     */
    'zip_code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AttorneyUpdate
     */
    'state'?: string | null;
}
/**
 * 
 * @export
 * @interface ClientCreate
 */
export interface ClientCreate {
    /**
     * Client\'s first name
     * @type {string}
     * @memberof ClientCreate
     */
    'first_name': string;
    /**
     * Client\'s last name
     * @type {string}
     * @memberof ClientCreate
     */
    'last_name': string;
    /**
     * Client\'s country of birth
     * @type {string}
     * @memberof ClientCreate
     */
    'country_of_birth': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'nationality'?: string | null;
    /**
     * Client\'s birth date
     * @type {string}
     * @memberof ClientCreate
     */
    'birth_date': string;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'alien_registration_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'passport_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'school_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientCreate
     */
    'student_id_number'?: string | null;
}
/**
 * 
 * @export
 * @interface ClientResponse
 */
export interface ClientResponse {
    /**
     * Client\'s first name
     * @type {string}
     * @memberof ClientResponse
     */
    'first_name': string;
    /**
     * Client\'s last name
     * @type {string}
     * @memberof ClientResponse
     */
    'last_name': string;
    /**
     * Client\'s country of birth
     * @type {string}
     * @memberof ClientResponse
     */
    'country_of_birth': string;
    /**
     * 
     * @type {string}
     * @memberof ClientResponse
     */
    'nationality'?: string | null;
    /**
     * Client\'s birth date
     * @type {string}
     * @memberof ClientResponse
     */
    'birth_date': string;
    /**
     * 
     * @type {string}
     * @memberof ClientResponse
     */
    'alien_registration_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientResponse
     */
    'passport_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientResponse
     */
    'school_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientResponse
     */
    'student_id_number'?: string | null;
    /**
     * Unique identifier for the client
     * @type {number}
     * @memberof ClientResponse
     */
    'id': number;
    /**
     * Timestamp when the record was created
     * @type {string}
     * @memberof ClientResponse
     */
    'created_at': string;
    /**
     * Timestamp when the record was last updated
     * @type {string}
     * @memberof ClientResponse
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface ClientUpdate
 */
export interface ClientUpdate {
    /**
     * 
     * @type {string}
     * @memberof ClientUpdate
     */
    'first_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientUpdate
     */
    'last_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientUpdate
     */
    'country_of_birth'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientUpdate
     */
    'nationality'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientUpdate
     */
    'birth_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientUpdate
     */
    'alien_registration_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientUpdate
     */
    'passport_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientUpdate
     */
    'school_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ClientUpdate
     */
    'student_id_number'?: string | null;
}
/**
 * Schema for creating a new emergency contact
 * @export
 * @interface EmergencyContactCreate
 */
export interface EmergencyContactCreate {
    /**
     * Full name of the emergency contact
     * @type {string}
     * @memberof EmergencyContactCreate
     */
    'full_name': string;
    /**
     * Relationship to the client
     * @type {string}
     * @memberof EmergencyContactCreate
     */
    'relationship': string;
    /**
     * Phone number of the emergency contact
     * @type {string}
     * @memberof EmergencyContactCreate
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactCreate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactCreate
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactCreate
     */
    'notes'?: string | null;
    /**
     * ID of the associated client
     * @type {number}
     * @memberof EmergencyContactCreate
     */
    'client_id': number;
}
/**
 * Schema for emergency contact response Includes read-only fields like id and timestamps
 * @export
 * @interface EmergencyContactResponse
 */
export interface EmergencyContactResponse {
    /**
     * Full name of the emergency contact
     * @type {string}
     * @memberof EmergencyContactResponse
     */
    'full_name': string;
    /**
     * Relationship to the client
     * @type {string}
     * @memberof EmergencyContactResponse
     */
    'relationship': string;
    /**
     * Phone number of the emergency contact
     * @type {string}
     * @memberof EmergencyContactResponse
     */
    'phone_number': string;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactResponse
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactResponse
     */
    'notes'?: string | null;
    /**
     * Unique identifier for the emergency contact
     * @type {number}
     * @memberof EmergencyContactResponse
     */
    'id': number;
    /**
     * ID of the associated client
     * @type {number}
     * @memberof EmergencyContactResponse
     */
    'client_id': number;
    /**
     * Timestamp when the record was created
     * @type {string}
     * @memberof EmergencyContactResponse
     */
    'created_at': string;
    /**
     * Timestamp when the record was last updated
     * @type {string}
     * @memberof EmergencyContactResponse
     */
    'updated_at': string;
    /**
     * Returns the phone number in E.164 format
     * @type {string}
     * @memberof EmergencyContactResponse
     */
    'formatted_phone': string;
    /**
     * Returns a display-friendly name with relationship
     * @type {string}
     * @memberof EmergencyContactResponse
     */
    'display_name': string;
}
/**
 * Schema for updating an existing emergency contact All fields are optional to allow partial updates
 * @export
 * @interface EmergencyContactUpdate
 */
export interface EmergencyContactUpdate {
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactUpdate
     */
    'full_name'?: string | null;
    /**
     * Relationship to the client
     * @type {string}
     * @memberof EmergencyContactUpdate
     */
    'relationship': string;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactUpdate
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactUpdate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactUpdate
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactUpdate
     */
    'notes'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmergencyContactUpdate
     */
    'relationship_to_client'?: string | null;
}
/**
 * Schema for an Example with ID
 * @export
 * @interface Example
 */
export interface Example {
    /**
     * 
     * @type {string}
     * @memberof Example
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Example
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Example
     */
    'id': number;
}
/**
 * Schema for creating a new Example
 * @export
 * @interface ExampleCreate
 */
export interface ExampleCreate {
    /**
     * 
     * @type {string}
     * @memberof ExampleCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExampleCreate
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AttorneysApi - axios parameter creator
 * @export
 */
export const AttorneysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new attorney record in the system
         * @summary Create Attorney
         * @param {AttorneyCreate} attorneyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttorneyAttorneysPost: async (attorneyCreate: AttorneyCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attorneyCreate' is not null or undefined
            assertParamExists('createAttorneyAttorneysPost', 'attorneyCreate', attorneyCreate)
            const localVarPath = `/attorneys/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attorneyCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an attorney from the system
         * @summary Delete Attorney
         * @param {number} attorneyId The ID of the attorney to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttorneyAttorneysAttorneyIdDelete: async (attorneyId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attorneyId' is not null or undefined
            assertParamExists('deleteAttorneyAttorneysAttorneyIdDelete', 'attorneyId', attorneyId)
            const localVarPath = `/attorneys/{attorney_id}`
                .replace(`{${"attorney_id"}}`, encodeURIComponent(String(attorneyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve detailed information about a specific attorney by ID
         * @summary Get Attorney
         * @param {number} attorneyId The ID of the attorney to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttorneyAttorneysAttorneyIdGet: async (attorneyId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attorneyId' is not null or undefined
            assertParamExists('readAttorneyAttorneysAttorneyIdGet', 'attorneyId', attorneyId)
            const localVarPath = `/attorneys/{attorney_id}`
                .replace(`{${"attorney_id"}}`, encodeURIComponent(String(attorneyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of attorneys with optional filtering by state and zip code
         * @summary List Attorneys
         * @param {number} [skip] Number of records to skip for pagination
         * @param {number} [limit] Maximum number of records to return
         * @param {string | null} [state] Filter by state (two-letter code)
         * @param {string | null} [zipCode] Filter by zip code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttorneysAttorneysGet: async (skip?: number, limit?: number, state?: string | null, zipCode?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/attorneys/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (zipCode !== undefined) {
                localVarQueryParameter['zip_code'] = zipCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an attorney\'s information (partial update)
         * @summary Update Attorney
         * @param {number} attorneyId The ID of the attorney to update
         * @param {AttorneyUpdate} attorneyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttorneyAttorneysAttorneyIdPatch: async (attorneyId: number, attorneyUpdate: AttorneyUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attorneyId' is not null or undefined
            assertParamExists('updateAttorneyAttorneysAttorneyIdPatch', 'attorneyId', attorneyId)
            // verify required parameter 'attorneyUpdate' is not null or undefined
            assertParamExists('updateAttorneyAttorneysAttorneyIdPatch', 'attorneyUpdate', attorneyUpdate)
            const localVarPath = `/attorneys/{attorney_id}`
                .replace(`{${"attorney_id"}}`, encodeURIComponent(String(attorneyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attorneyUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttorneysApi - functional programming interface
 * @export
 */
export const AttorneysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttorneysApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new attorney record in the system
         * @summary Create Attorney
         * @param {AttorneyCreate} attorneyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAttorneyAttorneysPost(attorneyCreate: AttorneyCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attorney>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAttorneyAttorneysPost(attorneyCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttorneysApi.createAttorneyAttorneysPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an attorney from the system
         * @summary Delete Attorney
         * @param {number} attorneyId The ID of the attorney to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttorneyAttorneysAttorneyIdDelete(attorneyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttorneyAttorneysAttorneyIdDelete(attorneyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttorneysApi.deleteAttorneyAttorneysAttorneyIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve detailed information about a specific attorney by ID
         * @summary Get Attorney
         * @param {number} attorneyId The ID of the attorney to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAttorneyAttorneysAttorneyIdGet(attorneyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attorney>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAttorneyAttorneysAttorneyIdGet(attorneyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttorneysApi.readAttorneyAttorneysAttorneyIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of attorneys with optional filtering by state and zip code
         * @summary List Attorneys
         * @param {number} [skip] Number of records to skip for pagination
         * @param {number} [limit] Maximum number of records to return
         * @param {string | null} [state] Filter by state (two-letter code)
         * @param {string | null} [zipCode] Filter by zip code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAttorneysAttorneysGet(skip?: number, limit?: number, state?: string | null, zipCode?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Attorney>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAttorneysAttorneysGet(skip, limit, state, zipCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttorneysApi.readAttorneysAttorneysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an attorney\'s information (partial update)
         * @summary Update Attorney
         * @param {number} attorneyId The ID of the attorney to update
         * @param {AttorneyUpdate} attorneyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttorneyAttorneysAttorneyIdPatch(attorneyId: number, attorneyUpdate: AttorneyUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Attorney>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttorneyAttorneysAttorneyIdPatch(attorneyId, attorneyUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttorneysApi.updateAttorneyAttorneysAttorneyIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttorneysApi - factory interface
 * @export
 */
export const AttorneysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttorneysApiFp(configuration)
    return {
        /**
         * Creates a new attorney record in the system
         * @summary Create Attorney
         * @param {AttorneyCreate} attorneyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttorneyAttorneysPost(attorneyCreate: AttorneyCreate, options?: RawAxiosRequestConfig): AxiosPromise<Attorney> {
            return localVarFp.createAttorneyAttorneysPost(attorneyCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an attorney from the system
         * @summary Delete Attorney
         * @param {number} attorneyId The ID of the attorney to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttorneyAttorneysAttorneyIdDelete(attorneyId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAttorneyAttorneysAttorneyIdDelete(attorneyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information about a specific attorney by ID
         * @summary Get Attorney
         * @param {number} attorneyId The ID of the attorney to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttorneyAttorneysAttorneyIdGet(attorneyId: number, options?: RawAxiosRequestConfig): AxiosPromise<Attorney> {
            return localVarFp.readAttorneyAttorneysAttorneyIdGet(attorneyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of attorneys with optional filtering by state and zip code
         * @summary List Attorneys
         * @param {number} [skip] Number of records to skip for pagination
         * @param {number} [limit] Maximum number of records to return
         * @param {string | null} [state] Filter by state (two-letter code)
         * @param {string | null} [zipCode] Filter by zip code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttorneysAttorneysGet(skip?: number, limit?: number, state?: string | null, zipCode?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<Attorney>> {
            return localVarFp.readAttorneysAttorneysGet(skip, limit, state, zipCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an attorney\'s information (partial update)
         * @summary Update Attorney
         * @param {number} attorneyId The ID of the attorney to update
         * @param {AttorneyUpdate} attorneyUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttorneyAttorneysAttorneyIdPatch(attorneyId: number, attorneyUpdate: AttorneyUpdate, options?: RawAxiosRequestConfig): AxiosPromise<Attorney> {
            return localVarFp.updateAttorneyAttorneysAttorneyIdPatch(attorneyId, attorneyUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttorneysApi - object-oriented interface
 * @export
 * @class AttorneysApi
 * @extends {BaseAPI}
 */
export class AttorneysApi extends BaseAPI {
    /**
     * Creates a new attorney record in the system
     * @summary Create Attorney
     * @param {AttorneyCreate} attorneyCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttorneysApi
     */
    public createAttorneyAttorneysPost(attorneyCreate: AttorneyCreate, options?: RawAxiosRequestConfig) {
        return AttorneysApiFp(this.configuration).createAttorneyAttorneysPost(attorneyCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an attorney from the system
     * @summary Delete Attorney
     * @param {number} attorneyId The ID of the attorney to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttorneysApi
     */
    public deleteAttorneyAttorneysAttorneyIdDelete(attorneyId: number, options?: RawAxiosRequestConfig) {
        return AttorneysApiFp(this.configuration).deleteAttorneyAttorneysAttorneyIdDelete(attorneyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve detailed information about a specific attorney by ID
     * @summary Get Attorney
     * @param {number} attorneyId The ID of the attorney to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttorneysApi
     */
    public readAttorneyAttorneysAttorneyIdGet(attorneyId: number, options?: RawAxiosRequestConfig) {
        return AttorneysApiFp(this.configuration).readAttorneyAttorneysAttorneyIdGet(attorneyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of attorneys with optional filtering by state and zip code
     * @summary List Attorneys
     * @param {number} [skip] Number of records to skip for pagination
     * @param {number} [limit] Maximum number of records to return
     * @param {string | null} [state] Filter by state (two-letter code)
     * @param {string | null} [zipCode] Filter by zip code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttorneysApi
     */
    public readAttorneysAttorneysGet(skip?: number, limit?: number, state?: string | null, zipCode?: string | null, options?: RawAxiosRequestConfig) {
        return AttorneysApiFp(this.configuration).readAttorneysAttorneysGet(skip, limit, state, zipCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an attorney\'s information (partial update)
     * @summary Update Attorney
     * @param {number} attorneyId The ID of the attorney to update
     * @param {AttorneyUpdate} attorneyUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttorneysApi
     */
    public updateAttorneyAttorneysAttorneyIdPatch(attorneyId: number, attorneyUpdate: AttorneyUpdate, options?: RawAxiosRequestConfig) {
        return AttorneysApiFp(this.configuration).updateAttorneyAttorneysAttorneyIdPatch(attorneyId, attorneyUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new client record
         * @summary Create Client
         * @param {ClientCreate} clientCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClientClientsPost: async (clientCreate: ClientCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientCreate' is not null or undefined
            assertParamExists('createClientClientsPost', 'clientCreate', clientCreate)
            const localVarPath = `/clients/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a client
         * @summary Delete Client
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientClientsClientIdDelete: async (clientId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('deleteClientClientsClientIdDelete', 'clientId', clientId)
            const localVarPath = `/clients/{client_id}`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific client by ID
         * @summary Read Client
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClientClientsClientIdGet: async (clientId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('readClientClientsClientIdGet', 'clientId', clientId)
            const localVarPath = `/clients/{client_id}`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve clients with optional filtering and pagination
         * @summary Read Clients
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [countryOfBirth] Filter by country of birth
         * @param {string | null} [nationality] Filter by nationality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClientsClientsGet: async (skip?: number, limit?: number, countryOfBirth?: string | null, nationality?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clients/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (countryOfBirth !== undefined) {
                localVarQueryParameter['country_of_birth'] = countryOfBirth;
            }

            if (nationality !== undefined) {
                localVarQueryParameter['nationality'] = nationality;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a client\'s information
         * @summary Update Client
         * @param {number} clientId 
         * @param {ClientUpdate} clientUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientClientsClientIdPatch: async (clientId: number, clientUpdate: ClientUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('updateClientClientsClientIdPatch', 'clientId', clientId)
            // verify required parameter 'clientUpdate' is not null or undefined
            assertParamExists('updateClientClientsClientIdPatch', 'clientUpdate', clientUpdate)
            const localVarPath = `/clients/{client_id}`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new client record
         * @summary Create Client
         * @param {ClientCreate} clientCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClientClientsPost(clientCreate: ClientCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClientClientsPost(clientCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.createClientClientsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a client
         * @summary Delete Client
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClientClientsClientIdDelete(clientId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClientClientsClientIdDelete(clientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.deleteClientClientsClientIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific client by ID
         * @summary Read Client
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readClientClientsClientIdGet(clientId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readClientClientsClientIdGet(clientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.readClientClientsClientIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve clients with optional filtering and pagination
         * @summary Read Clients
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [countryOfBirth] Filter by country of birth
         * @param {string | null} [nationality] Filter by nationality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readClientsClientsGet(skip?: number, limit?: number, countryOfBirth?: string | null, nationality?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClientResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readClientsClientsGet(skip, limit, countryOfBirth, nationality, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.readClientsClientsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a client\'s information
         * @summary Update Client
         * @param {number} clientId 
         * @param {ClientUpdate} clientUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientClientsClientIdPatch(clientId: number, clientUpdate: ClientUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientClientsClientIdPatch(clientId, clientUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientsApi.updateClientClientsClientIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * Create a new client record
         * @summary Create Client
         * @param {ClientCreate} clientCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClientClientsPost(clientCreate: ClientCreate, options?: RawAxiosRequestConfig): AxiosPromise<ClientResponse> {
            return localVarFp.createClientClientsPost(clientCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a client
         * @summary Delete Client
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientClientsClientIdDelete(clientId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteClientClientsClientIdDelete(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific client by ID
         * @summary Read Client
         * @param {number} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClientClientsClientIdGet(clientId: number, options?: RawAxiosRequestConfig): AxiosPromise<ClientResponse> {
            return localVarFp.readClientClientsClientIdGet(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve clients with optional filtering and pagination
         * @summary Read Clients
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {string | null} [countryOfBirth] Filter by country of birth
         * @param {string | null} [nationality] Filter by nationality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClientsClientsGet(skip?: number, limit?: number, countryOfBirth?: string | null, nationality?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Array<ClientResponse>> {
            return localVarFp.readClientsClientsGet(skip, limit, countryOfBirth, nationality, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a client\'s information
         * @summary Update Client
         * @param {number} clientId 
         * @param {ClientUpdate} clientUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientClientsClientIdPatch(clientId: number, clientUpdate: ClientUpdate, options?: RawAxiosRequestConfig): AxiosPromise<ClientResponse> {
            return localVarFp.updateClientClientsClientIdPatch(clientId, clientUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * Create a new client record
     * @summary Create Client
     * @param {ClientCreate} clientCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public createClientClientsPost(clientCreate: ClientCreate, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).createClientClientsPost(clientCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a client
     * @summary Delete Client
     * @param {number} clientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public deleteClientClientsClientIdDelete(clientId: number, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).deleteClientClientsClientIdDelete(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific client by ID
     * @summary Read Client
     * @param {number} clientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public readClientClientsClientIdGet(clientId: number, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).readClientClientsClientIdGet(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve clients with optional filtering and pagination
     * @summary Read Clients
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {string | null} [countryOfBirth] Filter by country of birth
     * @param {string | null} [nationality] Filter by nationality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public readClientsClientsGet(skip?: number, limit?: number, countryOfBirth?: string | null, nationality?: string | null, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).readClientsClientsGet(skip, limit, countryOfBirth, nationality, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a client\'s information
     * @summary Update Client
     * @param {number} clientId 
     * @param {ClientUpdate} clientUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateClientClientsClientIdPatch(clientId: number, clientUpdate: ClientUpdate, options?: RawAxiosRequestConfig) {
        return ClientsApiFp(this.configuration).updateClientClientsClientIdPatch(clientId, clientUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks the health of the API, primarily database connectivity.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Checks the health of the API, primarily database connectivity.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheckHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Checks the health of the API, primarily database connectivity.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Checks the health of the API, primarily database connectivity.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckHealthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckHealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EmergencyContactsApi - axios parameter creator
 * @export
 */
export const EmergencyContactsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new emergency contact record
         * @summary Create Emergency Contact
         * @param {EmergencyContactCreate} emergencyContactCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmergencyContactEmergencyContactsPost: async (emergencyContactCreate: EmergencyContactCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emergencyContactCreate' is not null or undefined
            assertParamExists('createEmergencyContactEmergencyContactsPost', 'emergencyContactCreate', emergencyContactCreate)
            const localVarPath = `/emergency-contacts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emergencyContactCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an emergency contact
         * @summary Delete Emergency Contact
         * @param {number} emergencyContactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmergencyContactEmergencyContactsEmergencyContactIdDelete: async (emergencyContactId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emergencyContactId' is not null or undefined
            assertParamExists('deleteEmergencyContactEmergencyContactsEmergencyContactIdDelete', 'emergencyContactId', emergencyContactId)
            const localVarPath = `/emergency-contacts/{emergency_contact_id}`
                .replace(`{${"emergency_contact_id"}}`, encodeURIComponent(String(emergencyContactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific emergency contact by ID
         * @summary Read Emergency Contact
         * @param {number} emergencyContactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEmergencyContactEmergencyContactsEmergencyContactIdGet: async (emergencyContactId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emergencyContactId' is not null or undefined
            assertParamExists('readEmergencyContactEmergencyContactsEmergencyContactIdGet', 'emergencyContactId', emergencyContactId)
            const localVarPath = `/emergency-contacts/{emergency_contact_id}`
                .replace(`{${"emergency_contact_id"}}`, encodeURIComponent(String(emergencyContactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve emergency contacts for a client with pagination
         * @summary Read Emergency Contacts
         * @param {number} clientId ID of the client
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEmergencyContactsEmergencyContactsGet: async (clientId: number, skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('readEmergencyContactsEmergencyContactsGet', 'clientId', clientId)
            const localVarPath = `/emergency-contacts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an emergency contact\'s information
         * @summary Update Emergency Contact
         * @param {number} emergencyContactId 
         * @param {EmergencyContactUpdate} emergencyContactUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmergencyContactEmergencyContactsEmergencyContactIdPatch: async (emergencyContactId: number, emergencyContactUpdate: EmergencyContactUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emergencyContactId' is not null or undefined
            assertParamExists('updateEmergencyContactEmergencyContactsEmergencyContactIdPatch', 'emergencyContactId', emergencyContactId)
            // verify required parameter 'emergencyContactUpdate' is not null or undefined
            assertParamExists('updateEmergencyContactEmergencyContactsEmergencyContactIdPatch', 'emergencyContactUpdate', emergencyContactUpdate)
            const localVarPath = `/emergency-contacts/{emergency_contact_id}`
                .replace(`{${"emergency_contact_id"}}`, encodeURIComponent(String(emergencyContactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emergencyContactUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmergencyContactsApi - functional programming interface
 * @export
 */
export const EmergencyContactsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmergencyContactsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new emergency contact record
         * @summary Create Emergency Contact
         * @param {EmergencyContactCreate} emergencyContactCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmergencyContactEmergencyContactsPost(emergencyContactCreate: EmergencyContactCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmergencyContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmergencyContactEmergencyContactsPost(emergencyContactCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmergencyContactsApi.createEmergencyContactEmergencyContactsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an emergency contact
         * @summary Delete Emergency Contact
         * @param {number} emergencyContactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmergencyContactEmergencyContactsEmergencyContactIdDelete(emergencyContactId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmergencyContactEmergencyContactsEmergencyContactIdDelete(emergencyContactId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmergencyContactsApi.deleteEmergencyContactEmergencyContactsEmergencyContactIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific emergency contact by ID
         * @summary Read Emergency Contact
         * @param {number} emergencyContactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readEmergencyContactEmergencyContactsEmergencyContactIdGet(emergencyContactId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmergencyContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readEmergencyContactEmergencyContactsEmergencyContactIdGet(emergencyContactId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmergencyContactsApi.readEmergencyContactEmergencyContactsEmergencyContactIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve emergency contacts for a client with pagination
         * @summary Read Emergency Contacts
         * @param {number} clientId ID of the client
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readEmergencyContactsEmergencyContactsGet(clientId: number, skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmergencyContactResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readEmergencyContactsEmergencyContactsGet(clientId, skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmergencyContactsApi.readEmergencyContactsEmergencyContactsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an emergency contact\'s information
         * @summary Update Emergency Contact
         * @param {number} emergencyContactId 
         * @param {EmergencyContactUpdate} emergencyContactUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmergencyContactEmergencyContactsEmergencyContactIdPatch(emergencyContactId: number, emergencyContactUpdate: EmergencyContactUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmergencyContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmergencyContactEmergencyContactsEmergencyContactIdPatch(emergencyContactId, emergencyContactUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmergencyContactsApi.updateEmergencyContactEmergencyContactsEmergencyContactIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EmergencyContactsApi - factory interface
 * @export
 */
export const EmergencyContactsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmergencyContactsApiFp(configuration)
    return {
        /**
         * Create a new emergency contact record
         * @summary Create Emergency Contact
         * @param {EmergencyContactCreate} emergencyContactCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmergencyContactEmergencyContactsPost(emergencyContactCreate: EmergencyContactCreate, options?: RawAxiosRequestConfig): AxiosPromise<EmergencyContactResponse> {
            return localVarFp.createEmergencyContactEmergencyContactsPost(emergencyContactCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an emergency contact
         * @summary Delete Emergency Contact
         * @param {number} emergencyContactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmergencyContactEmergencyContactsEmergencyContactIdDelete(emergencyContactId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEmergencyContactEmergencyContactsEmergencyContactIdDelete(emergencyContactId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific emergency contact by ID
         * @summary Read Emergency Contact
         * @param {number} emergencyContactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEmergencyContactEmergencyContactsEmergencyContactIdGet(emergencyContactId: number, options?: RawAxiosRequestConfig): AxiosPromise<EmergencyContactResponse> {
            return localVarFp.readEmergencyContactEmergencyContactsEmergencyContactIdGet(emergencyContactId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve emergency contacts for a client with pagination
         * @summary Read Emergency Contacts
         * @param {number} clientId ID of the client
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readEmergencyContactsEmergencyContactsGet(clientId: number, skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<EmergencyContactResponse>> {
            return localVarFp.readEmergencyContactsEmergencyContactsGet(clientId, skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an emergency contact\'s information
         * @summary Update Emergency Contact
         * @param {number} emergencyContactId 
         * @param {EmergencyContactUpdate} emergencyContactUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmergencyContactEmergencyContactsEmergencyContactIdPatch(emergencyContactId: number, emergencyContactUpdate: EmergencyContactUpdate, options?: RawAxiosRequestConfig): AxiosPromise<EmergencyContactResponse> {
            return localVarFp.updateEmergencyContactEmergencyContactsEmergencyContactIdPatch(emergencyContactId, emergencyContactUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmergencyContactsApi - object-oriented interface
 * @export
 * @class EmergencyContactsApi
 * @extends {BaseAPI}
 */
export class EmergencyContactsApi extends BaseAPI {
    /**
     * Create a new emergency contact record
     * @summary Create Emergency Contact
     * @param {EmergencyContactCreate} emergencyContactCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmergencyContactsApi
     */
    public createEmergencyContactEmergencyContactsPost(emergencyContactCreate: EmergencyContactCreate, options?: RawAxiosRequestConfig) {
        return EmergencyContactsApiFp(this.configuration).createEmergencyContactEmergencyContactsPost(emergencyContactCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an emergency contact
     * @summary Delete Emergency Contact
     * @param {number} emergencyContactId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmergencyContactsApi
     */
    public deleteEmergencyContactEmergencyContactsEmergencyContactIdDelete(emergencyContactId: number, options?: RawAxiosRequestConfig) {
        return EmergencyContactsApiFp(this.configuration).deleteEmergencyContactEmergencyContactsEmergencyContactIdDelete(emergencyContactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific emergency contact by ID
     * @summary Read Emergency Contact
     * @param {number} emergencyContactId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmergencyContactsApi
     */
    public readEmergencyContactEmergencyContactsEmergencyContactIdGet(emergencyContactId: number, options?: RawAxiosRequestConfig) {
        return EmergencyContactsApiFp(this.configuration).readEmergencyContactEmergencyContactsEmergencyContactIdGet(emergencyContactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve emergency contacts for a client with pagination
     * @summary Read Emergency Contacts
     * @param {number} clientId ID of the client
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmergencyContactsApi
     */
    public readEmergencyContactsEmergencyContactsGet(clientId: number, skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return EmergencyContactsApiFp(this.configuration).readEmergencyContactsEmergencyContactsGet(clientId, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an emergency contact\'s information
     * @summary Update Emergency Contact
     * @param {number} emergencyContactId 
     * @param {EmergencyContactUpdate} emergencyContactUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmergencyContactsApi
     */
    public updateEmergencyContactEmergencyContactsEmergencyContactIdPatch(emergencyContactId: number, emergencyContactUpdate: EmergencyContactUpdate, options?: RawAxiosRequestConfig) {
        return EmergencyContactsApiFp(this.configuration).updateEmergencyContactEmergencyContactsEmergencyContactIdPatch(emergencyContactId, emergencyContactUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExamplesApi - axios parameter creator
 * @export
 */
export const ExamplesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new example.
         * @summary Create Example
         * @param {ExampleCreate} exampleCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExampleExamplesPost: async (exampleCreate: ExampleCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exampleCreate' is not null or undefined
            assertParamExists('createExampleExamplesPost', 'exampleCreate', exampleCreate)
            const localVarPath = `/examples/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exampleCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific example by ID.
         * @summary Get Example
         * @param {number} exampleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExampleExamplesExampleIdGet: async (exampleId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exampleId' is not null or undefined
            assertParamExists('getExampleExamplesExampleIdGet', 'exampleId', exampleId)
            const localVarPath = `/examples/{example_id}`
                .replace(`{${"example_id"}}`, encodeURIComponent(String(exampleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all examples.
         * @summary Get Examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExamplesExamplesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/examples/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExamplesApi - functional programming interface
 * @export
 */
export const ExamplesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExamplesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new example.
         * @summary Create Example
         * @param {ExampleCreate} exampleCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExampleExamplesPost(exampleCreate: ExampleCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Example>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExampleExamplesPost(exampleCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamplesApi.createExampleExamplesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific example by ID.
         * @summary Get Example
         * @param {number} exampleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExampleExamplesExampleIdGet(exampleId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Example>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExampleExamplesExampleIdGet(exampleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamplesApi.getExampleExamplesExampleIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all examples.
         * @summary Get Examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExamplesExamplesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Example>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExamplesExamplesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExamplesApi.getExamplesExamplesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExamplesApi - factory interface
 * @export
 */
export const ExamplesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExamplesApiFp(configuration)
    return {
        /**
         * Create a new example.
         * @summary Create Example
         * @param {ExampleCreate} exampleCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExampleExamplesPost(exampleCreate: ExampleCreate, options?: RawAxiosRequestConfig): AxiosPromise<Example> {
            return localVarFp.createExampleExamplesPost(exampleCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific example by ID.
         * @summary Get Example
         * @param {number} exampleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExampleExamplesExampleIdGet(exampleId: number, options?: RawAxiosRequestConfig): AxiosPromise<Example> {
            return localVarFp.getExampleExamplesExampleIdGet(exampleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all examples.
         * @summary Get Examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExamplesExamplesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Example>> {
            return localVarFp.getExamplesExamplesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExamplesApi - object-oriented interface
 * @export
 * @class ExamplesApi
 * @extends {BaseAPI}
 */
export class ExamplesApi extends BaseAPI {
    /**
     * Create a new example.
     * @summary Create Example
     * @param {ExampleCreate} exampleCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamplesApi
     */
    public createExampleExamplesPost(exampleCreate: ExampleCreate, options?: RawAxiosRequestConfig) {
        return ExamplesApiFp(this.configuration).createExampleExamplesPost(exampleCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific example by ID.
     * @summary Get Example
     * @param {number} exampleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamplesApi
     */
    public getExampleExamplesExampleIdGet(exampleId: number, options?: RawAxiosRequestConfig) {
        return ExamplesApiFp(this.configuration).getExampleExamplesExampleIdGet(exampleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all examples.
     * @summary Get Examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamplesApi
     */
    public getExamplesExamplesGet(options?: RawAxiosRequestConfig) {
        return ExamplesApiFp(this.configuration).getExamplesExamplesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



