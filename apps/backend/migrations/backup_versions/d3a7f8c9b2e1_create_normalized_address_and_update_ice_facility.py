"""Create normalized_addresses and update ice_detention_facilities tables

Revision ID: d3a7f8c9b2e1
Revises: 06caa82208d2
Create Date: 2025-05-07 11:00:00.000000

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import func

# revision identifiers, used by Alembic.
revision: str = "d3a7f8c9b2e1"
down_revision: Union[str, None] = "06caa82208d2"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "normalized_addresses",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("ice_detention_facility_id", sa.Integer(), nullable=False),
        sa.Column(
            "api_source",
            sa.String(length=100),
            nullable=False,
            comment="Source of the geocoding API used (e.g., Positionstack)",
        ),
        sa.Column(
            "original_address_query",
            sa.Text(),
            nullable=False,
            comment="The original, full address string used for the API query",
        ),
        sa.Column("normalized_street_address", sa.String(length=255), nullable=True),
        sa.Column("normalized_city", sa.String(length=100), nullable=True),
        sa.Column("normalized_state", sa.String(length=50), nullable=True),
        sa.Column("normalized_zip_code", sa.String(length=20), nullable=True),
        sa.Column("county", sa.String(length=100), nullable=False, comment="County name returned by the geocoding API"),
        sa.Column("latitude", sa.Float(), nullable=True),
        sa.Column("longitude", sa.Float(), nullable=True),
        sa.Column(
            "api_response_json",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Complete JSON response from the geocoding API for reference",
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=func.now(), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=func.now(), nullable=False),
        sa.ForeignKeyConstraint(
            ["ice_detention_facility_id"],
            ["ice_detention_facilities.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_normalized_addresses_ice_detention_facility_id"),
        "normalized_addresses",
        ["ice_detention_facility_id"],
        unique=True,
    )
    op.create_index(op.f("ix_normalized_addresses_id"), "normalized_addresses", ["id"], unique=False)

    op.add_column("ice_detention_facilities", sa.Column("court_id", sa.Integer(), nullable=True))
    op.create_index(
        op.f("ix_ice_detention_facilities_court_id"), "ice_detention_facilities", ["court_id"], unique=False
    )
    op.create_foreign_key(
        "fk_ice_detention_facilities_court_id", "ice_detention_facilities", "courts", ["court_id"], ["id"]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("fk_ice_detention_facilities_court_id", "ice_detention_facilities", type_="foreignkey")
    op.drop_index(op.f("ix_ice_detention_facilities_court_id"), table_name="ice_detention_facilities")
    op.drop_column("ice_detention_facilities", "court_id")

    op.drop_index(op.f("ix_normalized_addresses_id"), table_name="normalized_addresses")
    op.drop_index(op.f("ix_normalized_addresses_ice_detention_facility_id"), table_name="normalized_addresses")
    op.drop_table("normalized_addresses")
    # ### end Alembic commands ###
